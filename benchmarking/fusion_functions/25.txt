; Generated with: https://github.com/nicdard/fusion-function-generator
; 60 functions (number of #begin ... #end blocks)
; 25 operators per function

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor c6 (not (not (not (not (not (not (xor (xor (not (xor c5 (xor c4 c3))) c2) (xor (not (xor x y)) (not (not c1)))))))))))))
(assert (= x (xor y (not (xor (not (not c1)) (xor (xor (not (xor c5 (xor c4 c3))) c2) (not (not (not (not (not (not (xor c6 z)))))))))))))
(assert (= y (xor x (not (xor (not (not c1)) (xor (xor (not (xor c5 (xor c4 c3))) c2) (not (not (not (not (not (not (xor c6 z)))))))))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ x (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))))))
(assert (= x (str.substr z 0 (str.indexof z (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))) (str.len x)))))
(assert (= y (str.replace (str.replace (str.replace (str.replace (str.substr (str.substr (str.substr (str.substr z (str.indexof z (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))) (str.len x)) (str.len (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))))) (str.len c11) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y)))))))) (str.len c10) (str.len (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))) (str.indexof (str.substr (str.substr (str.substr z (str.indexof z (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))) (str.len x)) (str.len (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))))) (str.len c11) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y)))))))) (str.len c10) (str.len (str.++ (str.++ c9 c8) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y))))))) (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y)))) (str.len (str.++ c9 c8))) (str.len (str.++ (str.++ c7 c6) (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) (str.++ c1 y)))))) (str.++ c7 c6) "") (str.++ c5 c4) "") (str.++ c3 c2) "") c1 "")))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ x (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))))))
(assert (= x (str.substr z 0 (str.len x))))
(assert (= y (str.substr (str.substr (str.substr z (str.indexof z (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))) (str.len x)) (str.len (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))))) (str.indexof (str.substr z (str.indexof z (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))) (str.len x)) (str.len (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))))) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1)) (str.len (str.++ c11 c10))) (str.len (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1)))) 0 (str.indexof (str.substr (str.substr z (str.indexof z (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))) (str.len x)) (str.len (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))))) (str.indexof (str.substr z (str.indexof z (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))) (str.len x)) (str.len (str.++ (str.++ c11 c10) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1))))) (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1)) (str.len (str.++ c11 c10))) (str.len (str.++ y (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1)))) (str.++ (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) (str.++ c5 (str.++ (str.++ c4 c3) c2)))) c1) (str.len y)))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (not (xor c7 (xor x (not (xor (xor (not (not (xor (not c6) (xor c5 (xor c4 (not (not (xor c3 c2)))))))) c1) (not y))))))))
(assert (= x (xor (not (xor (xor (not (not (xor (not c6) (xor c5 (xor c4 (not (not (xor c3 c2)))))))) c1) (not y))) (xor c7 (not z)))))
(assert (= y (not (xor (xor (not (not (xor (not c6) (xor c5 (xor c4 (not (not (xor c3 c2)))))))) c1) (not (xor x (xor c7 (not z))))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ (* c11 c10) (+ x (+ (+ c9 (+ (+ (* (- (* (* (+ c8 c7) c6) c5) c4) c3) y) c2)) c1)))))
(assert (= x (- (- z (* c11 c10)) (+ (+ c9 (+ (+ (* (- (* (* (+ c8 c7) c6) c5) c4) c3) y) c2)) c1))))
(assert (= y (- (- (- (- (- (- z (* c11 c10)) x) c1) c9) c2) (* (- (* (* (+ c8 c7) c6) c5) c4) c3))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr (str.substr (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) 0 (str.indexof (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1)) (str.len (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6)))) 0 (str.indexof (str.substr (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) 0 (str.indexof (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1)) (str.len (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6)))) c6 (str.len (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7)))) 0 (str.indexof (str.substr (str.substr (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) 0 (str.indexof (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1)) (str.len (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6)))) 0 (str.indexof (str.substr (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) 0 (str.indexof (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1)) (str.len (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6)))) c6 (str.len (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7)))) c7 (str.len (str.++ (str.++ x c10) (str.++ c9 c8))))) 0 (str.len (str.++ x c10))) 0 (str.len x))))
(assert (= y (str.replace (str.substr (str.substr (str.substr (str.substr z (str.indexof z (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))) (str.len c11)) (str.len (str.++ (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6) (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1))))) (str.len (str.++ (str.++ (str.++ (str.++ x c10) (str.++ c9 c8)) c7) c6)) (str.len (str.++ (str.++ c5 (str.++ c4 y)) (str.++ (str.++ c3 c2) c1)))) 0 (str.len (str.++ c5 (str.++ c4 y)))) (str.len c5) (str.len (str.++ c4 y))) c4 "")))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ x (str.++ c11 (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))))))
(assert (= x (str.substr z 0 (str.len x))))
(assert (= y (str.replace (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))) (str.len c8)) (str.len (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) 0 (str.indexof (str.substr (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))) (str.len c8)) (str.len (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.++ c3 (str.++ c2 c1)) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4))))) c7 "") 0 (str.indexof (str.replace (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))) (str.len c8)) (str.len (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) 0 (str.indexof (str.substr (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.indexof (str.substr (str.replace z x "") (str.len c11) (str.len (str.++ c10 (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))))) (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))))) (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1)))))) (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))) (str.len c8)) (str.len (str.++ (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4)) (str.++ c3 (str.++ c2 c1))))) (str.++ c3 (str.++ c2 c1)) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) y) c4))))) c7 "") c4 (str.len (str.++ (str.++ c6 c5) y)))) (str.++ c6 c5) "")))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))))
(assert (= x (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.indexof (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y) (str.len c5)) (str.len (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))) 0 (str.indexof (str.substr (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.indexof (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y) (str.len c5)) (str.len (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))) y (str.len (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x))))) c4 "") (str.len (str.++ (str.++ c3 c2) c1)) (str.len x))))
(assert (= y (str.replace (str.substr (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.indexof (str.substr (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.indexof (str.substr (str.replace (str.replace (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ c9 c8) (str.++ c7 (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))))))) c10 "") (str.++ c9 c8) "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))))) (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)) (str.len c6)) (str.len (str.++ c5 (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y)))) (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y) (str.len c5)) (str.len (str.++ (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) y))) (str.++ c4 (str.++ (str.++ (str.++ c3 c2) c1) x)) "")))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (* (- (- (- (* c11 (- (+ (- (+ c10 (* (- (- x c9) c8) c7)) c6) c5) c4)) c3) c2) c1) y)))
(assert (= x (+ (+ (/ (- (+ (- (+ (/ (+ (+ (+ (/ z y) c1) c2) c3) c11) c4) c5) c6) c10) c7) c8) c9)))
(assert (= y (/ z (- (- (- (* c11 (- (+ (- (+ c10 (* (- (- x c9) c8) c7)) c6) c5) c4)) c3) c2) c1))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ c11 (- (- (- c10 c9) (- c8 x)) (+ (* c7 (- (+ (* (* c6 y) (* c5 c4)) c3) c2)) c1)))))
(assert (= x (- c8 (- (- c10 c9) (+ (- z c11) (+ (* c7 (- (+ (* (* c6 y) (* c5 c4)) c3) c2)) c1))))))
(assert (= y (/ (/ (- (+ (/ (- (- (- (- c10 c9) (- c8 x)) (- z c11)) c1) c7) c2) c3) (* c5 c4)) c6)))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor (xor c6 c5) (xor x (not (not (not (xor c4 (not (not (not (not (xor (not c3) (not (xor y (xor (not c2) c1))))))))))))))))
(assert (= x (xor (not (not (not (xor c4 (not (not (not (not (xor (not c3) (not (xor y (xor (not c2) c1)))))))))))) (xor (xor c6 c5) z))))
(assert (= y (xor (xor (not c2) c1) (not (xor (not c3) (not (not (not (not (xor c4 (not (not (not (xor x (xor (xor c6 c5) z)))))))))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* (+ (+ c11 (+ (- c10 (* (* c9 (+ x (- (- (- c8 c7) c6) (+ y c5)))) c4)) c3)) c2) c1)))
(assert (= x (- (div (div (- c10 (- (- (- (div z c1) c2) c11) c3)) c4) c9) (- (- (- c8 c7) c6) (+ y c5)))))
(assert (= y (- (- (- (- c8 c7) c6) (- (div (div (- c10 (- (- (- (div z c1) c2) c11) c3)) c4) c9) x)) c5)))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- x (* (+ c11 c10) (* c9 (- (* (+ (+ (+ c8 (- (* c7 y) (- c6 c5))) c4) c3) c2) c1))))))
(assert (= x (+ z (* (+ c11 c10) (* c9 (- (* (+ (+ (+ c8 (- (* c7 y) (- c6 c5))) c4) c3) c2) c1))))))
(assert (= y (div (+ (- (- (- (div (+ (div (div (- x z) (+ c11 c10)) c9) c1) c2) c3) c4) c8) (- c6 c5)) c7)))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))) 0 (str.indexof (str.substr z (str.len c11) (str.len (str.++ (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.++ c3 (str.++ y (str.++ c2 c1))) (str.len (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4)))) 0 (str.len (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))))) 0 (str.len x))))
(assert (= y (str.substr (str.replace (str.replace (str.substr z (str.len c11) (str.len (str.++ (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) "") c3 "") 0 (str.indexof (str.replace (str.replace (str.substr z (str.len c11) (str.len (str.++ (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.++ (str.++ x (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ c8 c7) c6) c5)))) c4) "") c3 "") (str.++ c2 c1) (str.len y)))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (not (not (xor c6 (not (not (not (xor x (xor (xor (xor c5 c4) (not (xor c3 y))) (xor c2 (not (not (not (not c1)))))))))))))))
(assert (= x (xor (xor (xor (xor c5 c4) (not (xor c3 y))) (xor c2 (not (not (not (not c1)))))) (not (not (not (xor c6 (not (not z)))))))))
(assert (= y (xor c3 (not (xor (xor c5 c4) (xor (xor c2 (not (not (not (not c1))))) (xor x (not (not (not (xor c6 (not (not z)))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (not (xor (not (xor (xor (not (xor (not (xor (not c6) c5)) c4)) c3) (not (not x)))) (xor (not c2) (not (not (xor y c1))))))))
(assert (= x (not (not (xor (xor (not (xor (not (xor (not c6) c5)) c4)) c3) (not (xor (xor (not c2) (not (not (xor y c1)))) (not z))))))))
(assert (= y (xor c1 (not (not (xor (not c2) (xor (not (xor (xor (not (xor (not (xor (not c6) c5)) c4)) c3) (not (not x)))) (not z))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- (- x c11) (+ (+ (* y (- c10 (- (- (* (- (- (- c9 c8) c7) c6) c5) c4) c3))) c2) c1))))
(assert (= x (+ (+ z (+ (+ (* y (- c10 (- (- (* (- (- (- c9 c8) c7) c6) c5) c4) c3))) c2) c1)) c11)))
(assert (= y (div (- (- (- (- x c11) z) c1) c2) (- c10 (- (- (* (- (- (- c9 c8) c7) c6) c5) c4) c3)))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (xor (xor x y) (not (xor (xor (xor c5 c4) c3) (xor c2 (not (not (not (not (not (not (not (not (not (not c1)))))))))))))))))
(assert (= x (xor y (xor (not (xor (xor (xor c5 c4) c3) (xor c2 (not (not (not (not (not (not (not (not (not (not c1))))))))))))) (not z)))))
(assert (= y (xor x (xor (not (xor (xor (xor c5 c4) c3) (xor c2 (not (not (not (not (not (not (not (not (not (not c1))))))))))))) (not z)))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.indexof (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))) (str.len c10)) (str.len (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))))) 0 (str.len (str.++ x c9))) 0 (str.indexof (str.substr (str.substr (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.indexof (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))) (str.len c10)) (str.len (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))))) 0 (str.len (str.++ x c9))) c9 (str.len x)))))
(assert (= y (str.replace (str.substr (str.substr (str.replace (str.substr (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.indexof (str.substr z (str.indexof z (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))) (str.len c11)) (str.len (str.++ c10 (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1))))))))) (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))) (str.len c10)) (str.len (str.++ (str.++ x c9) (str.++ c8 (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))))) (str.++ x c9) "") (str.len c8) (str.len (str.++ (str.++ c7 y) (str.++ c6 (str.++ (str.++ c5 c4) (str.++ (str.++ c3 c2) c1)))))) 0 (str.len (str.++ c7 y))) c7 "")))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- (* (+ (- x (+ c11 (* (+ (* c10 (- c9 (- c8 c7))) (+ c6 (+ y c5))) c4))) c3) c2) c1)))
(assert (= x (+ (- (div (+ z c1) c2) c3) (+ c11 (* (+ (* c10 (- c9 (- c8 c7))) (+ c6 (+ y c5))) c4)))))
(assert (= y (- (- (- (div (- (- x (- (div (+ z c1) c2) c3)) c11) c4) (* c10 (- c9 (- c8 c7)))) c6) c5)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ c11 (* (* c10 (* (+ x c9) (- (+ c8 c7) (* (- c6 c5) y)))) (- c4 (+ (+ c3 c2) c1))))))
(assert (= x (- (/ (/ (/ (- z c11) (- c4 (+ (+ c3 c2) c1))) c10) (- (+ c8 c7) (* (- c6 c5) y))) c9)))
(assert (= y (/ (- (+ c8 c7) (/ (/ (/ (- z c11) (- c4 (+ (+ c3 c2) c1))) c10) (+ x c9))) (- c6 c5))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- c11 (+ (+ c10 c9) (* c8 (- x (+ c7 (* (+ c6 (- c5 (- (- y (+ c4 c3)) c2))) c1))))))))
(assert (= x (+ (/ (- (- c11 z) (+ c10 c9)) c8) (+ c7 (* (+ c6 (- c5 (- (- y (+ c4 c3)) c2))) c1)))))
(assert (= y (+ (+ (- c5 (- (/ (- (- x (/ (- (- c11 z) (+ c10 c9)) c8)) c7) c1) c6)) c2) (+ c4 c3))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- (- c11 (- (- (- (- c10 (- c9 (- x (* (* (* (+ c8 c7) c6) c5) c4)))) c3) c2) c1)) y)))
(assert (= x (+ (- c9 (- c10 (+ (+ (+ (- c11 (+ z y)) c1) c2) c3))) (* (* (* (+ c8 c7) c6) c5) c4))))
(assert (= y (- (- c11 (- (- (- (- c10 (- c9 (- x (* (* (* (+ c8 c7) c6) c5) c4)))) c3) c2) c1)) z)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- (+ (* c11 (* (- c10 c9) (* c8 (+ x (+ (* c7 (- c6 c5)) c4))))) c3) (+ (+ y c2) c1))))
(assert (= x (- (/ (/ (/ (- (+ z (+ (+ y c2) c1)) c3) c11) (- c10 c9)) c8) (+ (* c7 (- c6 c5)) c4))))
(assert (= y (- (- (- (+ (* c11 (* (- c10 c9) (* c8 (+ x (+ (* c7 (- c6 c5)) c4))))) c3) z) c1) c2)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ (+ c11 c10) (* c9 (* (+ (+ (- x (* c8 (+ (+ (* (+ c7 c6) c5) c4) c3))) c2) y) c1)))))
(assert (= x (+ (- (- (/ (/ (- z (+ c11 c10)) c9) c1) y) c2) (* c8 (+ (+ (* (+ c7 c6) c5) c4) c3)))))
(assert (= y (- (/ (/ (- z (+ c11 c10)) c9) c1) (+ (- x (* c8 (+ (+ (* (+ c7 c6) c5) c4) c3))) c2))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (not (not (xor (xor c7 (not (not c6))) (not (xor (not c5) (xor c4 (not (xor c3 (xor (xor x c2) (not y)))))))))) c1)))
(assert (= x (xor c2 (xor (not y) (xor c3 (not (xor c4 (xor (not c5) (not (xor (xor c7 (not (not c6))) (not (not (xor c1 z)))))))))))))
(assert (= y (not (xor (xor x c2) (xor c3 (not (xor c4 (xor (not c5) (not (xor (xor c7 (not (not c6))) (not (not (xor c1 z)))))))))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ (+ c11 (* (+ (- (- (* (* c10 c9) c8) (* c7 (* (* c6 (- x c5)) c4))) c3) y) c2)) c1)))
(assert (= x (+ (/ (/ (/ (- (* (* c10 c9) c8) (+ (- (/ (- (- z c1) c11) c2) y) c3)) c7) c4) c6) c5)))
(assert (= y (- (/ (- (- z c1) c11) c2) (- (- (* (* c10 c9) c8) (* c7 (* (* c6 (- x c5)) c4))) c3))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (* (+ x (* y (+ (* (* c11 c10) (+ (- c9 (- c8 (+ (+ (* c7 c6) c5) c4))) c3)) c2))) c1)))
(assert (= x (- (/ z c1) (* y (+ (* (* c11 c10) (+ (- c9 (- c8 (+ (+ (* c7 c6) c5) c4))) c3)) c2)))))
(assert (= y (/ (- (/ z c1) x) (+ (* (* c11 c10) (+ (- c9 (- c8 (+ (+ (* c7 c6) c5) c4))) c3)) c2))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (not (not (xor (xor (xor c7 c6) (not x)) c5))) (not (not (not (not (xor (xor c4 c3) (xor (not c2) (xor c1 y))))))))))
(assert (= x (not (xor (xor c7 c6) (xor c5 (not (not (xor (not (not (not (not (xor (xor c4 c3) (xor (not c2) (xor c1 y))))))) z))))))))
(assert (= y (xor c1 (xor (not c2) (xor (xor c4 c3) (not (not (not (not (xor (not (not (xor (xor (xor c7 c6) (not x)) c5))) z))))))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (* (* c11 (+ c10 c9)) (* (* c8 (+ c7 (* (+ (* (- c6 (+ (* x c5) c4)) c3) c2) y))) c1))))
(assert (= x (/ (- (- c6 (/ (- (/ (- (/ (/ (/ z (* c11 (+ c10 c9))) c1) c8) c7) y) c2) c3)) c4) c5)))
(assert (= y (/ (- (/ (/ (/ z (* c11 (+ c10 c9))) c1) c8) c7) (+ (* (- c6 (+ (* x c5) c4)) c3) c2))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* c11 (* x (* (+ c10 (- c9 c8)) (- (+ c7 (+ (* (- c6 (+ (+ c5 c4) y)) c3) c2)) c1))))))
(assert (= x (div (div z c11) (* (+ c10 (- c9 c8)) (- (+ c7 (+ (* (- c6 (+ (+ c5 c4) y)) c3) c2)) c1)))))
(assert (= y (- (- c6 (div (- (- (+ (div (div (div z c11) x) (+ c10 (- c9 c8))) c1) c7) c2) c3)) (+ c5 c4))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (+ (* (+ c11 (+ (- c10 (* (+ (- c9 (* (* c8 c7) x)) c6) c5)) (* y c4))) (- c3 c2)) c1)))
(assert (= x (div (- c9 (- (div (- c10 (- (- (div (- z c1) (- c3 c2)) c11) (* y c4))) c5) c6)) (* c8 c7))))
(assert (= y (div (- (- (div (- z c1) (- c3 c2)) c11) (- c10 (* (+ (- c9 (* (* c8 c7) x)) c6) c5))) c4)))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ (str.++ (str.++ c11 c10) c9) (str.++ (str.++ c8 c7) (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))))))))
(assert (= x (str.substr (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) 0 (str.indexof (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))) (str.len x)))))
(assert (= y (str.substr (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) (str.len x) (str.len (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) (str.len x) (str.len (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))) (str.len c6)) (str.len (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))) (str.len (str.++ (str.++ c5 c4) c3)) (str.len (str.++ c2 (str.++ c1 y)))) (str.len c2) (str.len (str.++ c1 y))) (str.indexof (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) (str.len x) (str.len (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.substr (str.replace z (str.++ (str.++ c11 c10) c9) "") (str.len (str.++ c8 c7)) (str.len (str.++ x (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))))) (str.len x) (str.len (str.++ c6 (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))) (str.len c6)) (str.len (str.++ (str.++ (str.++ c5 c4) c3) (str.++ c2 (str.++ c1 y))))) (str.len (str.++ (str.++ c5 c4) c3)) (str.len (str.++ c2 (str.++ c1 y)))) (str.len c2) (str.len (str.++ c1 y))) y (str.len c1)) (str.len y))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* (+ c11 (* (* c10 (* (+ c9 (+ (* c8 c7) x)) c6)) y)) (- (- (- (+ c5 c4) c3) c2) c1))))
(assert (= x (- (- (div (div (div (- (div z (- (- (- (+ c5 c4) c3) c2) c1)) c11) y) c10) c6) c9) (* c8 c7))))
(assert (= y (div (- (div z (- (- (- (+ c5 c4) c3) c2) c1)) c11) (* c10 (* (+ c9 (+ (* c8 c7) x)) c6)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ c11 (* (* c10 x) (+ c9 (+ c8 (- (- (+ (* c7 (* c6 y)) c5) (- (+ c4 c3) c2)) c1)))))))
(assert (= x (/ (/ (- z c11) (+ c9 (+ c8 (- (- (+ (* c7 (* c6 y)) c5) (- (+ c4 c3) c2)) c1)))) c10)))
(assert (= y (/ (/ (- (+ (+ (- (- (/ (- z c11) (* c10 x)) c9) c8) c1) (- (+ c4 c3) c2)) c5) c7) c6)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- (+ (+ c11 (+ x (- (- (- c10 (* (- c9 c8) (- (* (- c7 c6) c5) c4))) y) c3))) c2) c1)))
(assert (= x (- (- (- (+ z c1) c2) c11) (- (- (- c10 (* (- c9 c8) (- (* (- c7 c6) c5) c4))) y) c3))))
(assert (= y (- (- c10 (* (- c9 c8) (- (* (- c7 c6) c5) c4))) (+ (- (- (- (+ z c1) c2) c11) x) c3))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) 0 (str.len (str.++ (str.++ c9 c8) x))) (str.len (str.++ c9 c8)) (str.len x))))
(assert (= y (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))) (str.len (str.++ (str.++ c9 c8) x))) (str.len (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))) (str.len (str.++ (str.++ c9 c8) x))) (str.len (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))) (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))) (str.len c7)) (str.len (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))) (str.++ c6 (str.++ c5 (str.++ c4 c3))) "") 0 (str.indexof (str.replace (str.substr (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))) (str.len (str.++ (str.++ c9 c8) x))) (str.len (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))) (str.indexof (str.substr (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.indexof (str.substr (str.substr z (str.len c11) (str.len (str.++ c10 (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))))) (str.len c10) (str.len (str.++ (str.++ (str.++ c9 c8) x) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))))) (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))) (str.len (str.++ (str.++ c9 c8) x))) (str.len (str.++ c7 (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1)))))) (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))) (str.len c7)) (str.len (str.++ (str.++ c6 (str.++ c5 (str.++ c4 c3))) (str.++ y (str.++ c2 c1))))) (str.++ c6 (str.++ c5 (str.++ c4 c3))) "") (str.++ c2 c1) (str.len y)))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* (* (- c11 (* c10 (- (* (+ (* (- c9 (* c8 c7)) (- x (- y c6))) c5) c4) c3))) c2) c1)))
(assert (= x (+ (div (- (div (+ (div (- c11 (div (div z c1) c2)) c10) c3) c4) c5) (- c9 (* c8 c7))) (- y c6))))
(assert (= y (+ (- x (div (- (div (+ (div (- c11 (div (div z c1) c2)) c10) c3) c4) c5) (- c9 (* c8 c7)))) c6)))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- x (* c11 (- c10 (* c9 (- c8 (- (+ c7 c6) (+ (* (+ (* (* c5 c4) c3) y) c2) c1)))))))))
(assert (= x (+ z (* c11 (- c10 (* c9 (- c8 (- (+ c7 c6) (+ (* (+ (* (* c5 c4) c3) y) c2) c1)))))))))
(assert (= y (- (div (- (- (+ c7 c6) (- c8 (div (- c10 (div (- x z) c11)) c9))) c1) c2) (* (* c5 c4) c3))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (xor (xor (xor (not (not (xor (not (not x)) c7))) (xor (not (not (xor (xor (not c6) c5) y))) c4)) c3) c2) (not c1))))
(assert (= x (not (not (xor c7 (not (not (xor (xor (not (not (xor (xor (not c6) c5) y))) c4) (xor c3 (xor c2 (xor (not c1) z)))))))))))
(assert (= y (xor (xor (not c6) c5) (not (not (xor c4 (xor (not (not (xor (not (not x)) c7))) (xor c3 (xor c2 (xor (not c1) z))))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* (- c11 (- c10 (+ (+ (* c9 (+ (- (* (* c8 (+ (* c7 c6) c5)) x) c4) y)) c3) c2))) c1)))
(assert (= x (div (+ (- (div (- (- (- c10 (- c11 (div z c1))) c2) c3) c9) y) c4) (* c8 (+ (* c7 c6) c5)))))
(assert (= y (- (div (- (- (- c10 (- c11 (div z c1))) c2) c3) c9) (- (* (* c8 (+ (* c7 c6) c5)) x) c4))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (xor (xor (not (not c7)) (not c6)) c5) (xor (xor c4 (not x)) (xor y (not (xor (not (xor (not (not c3)) c2)) c1)))))))
(assert (= x (not (xor c4 (xor (xor y (not (xor (not (xor (not (not c3)) c2)) c1))) (xor (xor (xor (not (not c7)) (not c6)) c5) z))))))
(assert (= y (xor (not (xor (not (xor (not (not c3)) c2)) c1)) (xor (xor c4 (not x)) (xor (xor (xor (not (not c7)) (not c6)) c5) z)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (* c11 (+ c10 (- c9 (- c8 (* (- (- (- x c7) (* (* c6 c5) (* c4 (- c3 c2)))) c1) y)))))))
(assert (= x (+ (+ (+ (/ (- c8 (- c9 (- (/ z c11) c10))) y) c1) (* (* c6 c5) (* c4 (- c3 c2)))) c7)))
(assert (= y (/ (- c8 (- c9 (- (/ z c11) c10))) (- (- (- x c7) (* (* c6 c5) (* c4 (- c3 c2)))) c1))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- c11 (* (* (+ x (* c10 y)) c9) (- (- c8 (* (- c7 (+ c6 (+ (+ c5 c4) c3))) c2)) c1)))))
(assert (= x (- (/ (/ (- c11 z) (- (- c8 (* (- c7 (+ c6 (+ (+ c5 c4) c3))) c2)) c1)) c9) (* c10 y))))
(assert (= y (/ (- (/ (/ (- c11 z) (- (- c8 (* (- c7 (+ c6 (+ (+ c5 c4) c3))) c2)) c1)) c9) x) c10)))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- (+ (- c11 (+ (- (* (- (* (+ (* c10 (* (+ c9 c8) c7)) x) c6) y) c5) c4) c3)) c2) c1)))
(assert (= x (- (div (+ (div (+ (- (- c11 (- (+ z c1) c2)) c3) c4) c5) y) c6) (* c10 (* (+ c9 c8) c7)))))
(assert (= y (- (* (+ (* c10 (* (+ c9 c8) c7)) x) c6) (div (+ (- (- c11 (- (+ z c1) c2)) c3) c4) c5))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(declare-const c8 Bool)
(assert (= z (xor x (xor y (xor (xor c8 c7) (xor (xor (not (xor (xor c6 (not c5)) (not (not (not (xor (not c4) c3)))))) c2) c1))))))
(assert (= x (xor (xor y (xor (xor c8 c7) (xor (xor (not (xor (xor c6 (not c5)) (not (not (not (xor (not c4) c3)))))) c2) c1))) z)))
(assert (= y (xor (xor (xor c8 c7) (xor (xor (not (xor (xor c6 (not c5)) (not (not (not (xor (not c4) c3)))))) c2) c1)) (xor x z))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor c7 (xor (not c6) (xor c5 (xor c4 (xor (xor (not (not c3)) (not (not c2))) (not (xor x (not (not (xor c1 y))))))))))))
(assert (= x (xor (not (not (xor c1 y))) (not (xor (xor (not (not c3)) (not (not c2))) (xor c4 (xor c5 (xor (not c6) (xor c7 z)))))))))
(assert (= y (xor c1 (not (not (xor x (not (xor (xor (not (not c3)) (not (not c2))) (xor c4 (xor c5 (xor (not c6) (xor c7 z))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (not (not (xor (not c7) (not (xor (xor c6 (not (xor c5 (xor x (xor c4 (not y)))))) (not (not (xor c3 (xor c2 c1)))))))))))
(assert (= x (xor (xor c4 (not y)) (xor c5 (not (xor c6 (xor (not (not (xor c3 (xor c2 c1)))) (not (xor (not c7) (not (not z)))))))))))
(assert (= y (not (xor c4 (xor x (xor c5 (not (xor c6 (xor (not (not (xor c3 (xor c2 c1)))) (not (xor (not c7) (not (not z)))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor c6 (xor c5 (xor x (not (not (xor c4 (xor c3 (not (xor (not (xor c2 (not (not (not (not y)))))) (not (not c1)))))))))))))
(assert (= x (xor (not (not (xor c4 (xor c3 (not (xor (not (xor c2 (not (not (not (not y)))))) (not (not c1)))))))) (xor c5 (xor c6 z)))))
(assert (= y (not (not (not (not (xor c2 (not (xor (not (not c1)) (not (xor c3 (xor c4 (not (not (xor x (xor c5 (xor c6 z)))))))))))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* (- c11 (* (* x (- (- y c10) c9)) c8)) (- (- c7 c6) (+ c5 (- (* c4 c3) (* c2 c1)))))))
(assert (= x (div (div (- c11 (div z (- (- c7 c6) (+ c5 (- (* c4 c3) (* c2 c1)))))) c8) (- (- y c10) c9))))
(assert (= y (+ (+ (div (div (- c11 (div z (- (- c7 c6) (+ c5 (- (* c4 c3) (* c2 c1)))))) c8) x) c9) c10)))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (- (- (* (+ (+ c11 (- c10 (+ (- (+ c9 (- c8 c7)) (+ x (- c6 c5))) c4))) c3) c2) c1) y)))
(assert (= x (- (- (+ c9 (- c8 c7)) (- (- c10 (- (- (div (+ (+ z y) c1) c2) c3) c11)) c4)) (- c6 c5))))
(assert (= y (- (- (* (+ (+ c11 (- c10 (+ (- (+ c9 (- c8 c7)) (+ x (- c6 c5))) c4))) c3) c2) c1) z)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (+ (- x (+ c11 c10)) (- c9 (* (* (+ (* (* (+ c8 c7) (- (- y c6) c5)) c4) c3) c2) c1)))))
(assert (= x (+ (- z (- c9 (* (* (+ (* (* (+ c8 c7) (- (- y c6) c5)) c4) c3) c2) c1))) (+ c11 c10))))
(assert (= y (+ (+ (/ (/ (- (/ (/ (- c9 (- z (- x (+ c11 c10)))) c1) c2) c3) c4) (+ c8 c7)) c5) c6)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (* (- (* (- c11 (+ x c10)) c9) (+ (+ (+ (- c8 (+ (+ (- c7 c6) c5) c4)) c3) c2) y)) c1)))
(assert (= x (- (- c11 (/ (+ (/ z c1) (+ (+ (+ (- c8 (+ (+ (- c7 c6) c5) c4)) c3) c2) y)) c9)) c10)))
(assert (= y (- (- (* (- c11 (+ x c10)) c9) (/ z c1)) (+ (+ (- c8 (+ (+ (- c7 c6) c5) c4)) c3) c2))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(declare-const c10 Real)
(declare-const c11 Real)
(assert (= z (- (- c11 c10) (* (* (+ (* x c9) c8) (- c7 (+ (* (+ (* (- c6 c5) c4) c3) y) c2))) c1))))
(assert (= x (/ (- (/ (/ (- (- c11 c10) z) c1) (- c7 (+ (* (+ (* (- c6 c5) c4) c3) y) c2))) c8) c9)))
(assert (= y (/ (- (- c7 (/ (/ (- (- c11 c10) z) c1) (+ (* x c9) c8))) c2) (+ (* (- c6 c5) c4) c3))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(declare-const c8 Bool)
(assert (= z (xor c8 (not (xor c7 (xor c6 (not (xor (not (xor (xor (xor c5 (not (not x))) c4) c3)) (xor y (not (xor c2 c1)))))))))))
(assert (= x (not (not (xor c5 (xor c4 (xor c3 (not (xor (xor y (not (xor c2 c1))) (not (xor c6 (xor c7 (not (xor c8 z))))))))))))))
(assert (= y (xor (not (xor c2 c1)) (xor (not (xor (xor (xor c5 (not (not x))) c4) c3)) (not (xor c6 (xor c7 (not (xor c8 z)))))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(declare-const c10 String)
(declare-const c11 String)
(assert (= z (str.++ c11 (str.++ c10 (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1)))))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace (str.substr (str.replace z c11 "") (str.indexof (str.replace z c11 "") (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))))) c9 "") 0 (str.len (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4))) 0 (str.len (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)))) 0 (str.indexof (str.substr (str.substr (str.replace (str.substr (str.replace z c11 "") (str.indexof (str.replace z c11 "") (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))))) c9 "") 0 (str.len (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4))) 0 (str.len (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)))) (str.++ c6 c5) (str.len (str.++ (str.++ x c8) c7)))) 0 (str.indexof (str.substr (str.substr (str.substr (str.replace (str.substr (str.replace z c11 "") (str.indexof (str.replace z c11 "") (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))))) c9 "") 0 (str.len (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4))) 0 (str.len (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)))) 0 (str.indexof (str.substr (str.substr (str.replace (str.substr (str.replace z c11 "") (str.indexof (str.replace z c11 "") (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))))) c9 "") 0 (str.len (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4))) 0 (str.len (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)))) (str.++ c6 c5) (str.len (str.++ (str.++ x c8) c7)))) c7 (str.len (str.++ x c8)))) 0 (str.len x))))
(assert (= y (str.substr (str.replace (str.replace (str.replace (str.substr (str.replace z c11 "") (str.indexof (str.replace z c11 "") (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))) (str.len c10)) (str.len (str.++ c9 (str.++ (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) (str.++ c3 (str.++ y (str.++ c2 c1))))))) c9 "") (str.++ (str.++ (str.++ (str.++ x c8) c7) (str.++ c6 c5)) c4) "") c3 "") 0 (str.len y))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (* c11 (+ (- c10 (* (+ (+ x c9) c8) (- (- c7 (+ (* (* c6 (+ c5 c4)) c3) c2)) c1))) y))))
(assert (= x (- (- (div (- c10 (- (div z c11) y)) (- (- c7 (+ (* (* c6 (+ c5 c4)) c3) c2)) c1)) c8) c9)))
(assert (= y (- (div z c11) (- c10 (* (+ (+ x c9) c8) (- (- c7 (+ (* (* c6 (+ c5 c4)) c3) c2)) c1))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(declare-const c8 Bool)
(declare-const c9 Bool)
(assert (= z (xor (xor x (not (not (not (xor (not c9) c8))))) (xor c7 (xor (xor (xor (xor c6 y) (xor (xor c5 c4) c3)) c2) c1)))))
(assert (= x (xor (not (not (not (xor (not c9) c8)))) (xor (xor c7 (xor (xor (xor (xor c6 y) (xor (xor c5 c4) c3)) c2) c1)) z))))
(assert (= y (xor c6 (xor (xor (xor c5 c4) c3) (xor c2 (xor c1 (xor c7 (xor (xor x (not (not (not (xor (not c9) c8))))) z))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (+ (* c11 c10) (* c9 (+ (+ c8 (- (* c7 (- c6 (+ (* c5 (* c4 (+ c3 x))) y))) c2)) c1)))))
(assert (= x (- (div (div (- (- c6 (div (+ (- (- (div (- z (* c11 c10)) c9) c1) c8) c2) c7)) y) c5) c4) c3)))
(assert (= y (- (- c6 (div (+ (- (- (div (- z (* c11 c10)) c9) c1) c8) c2) c7)) (* c5 (* c4 (+ c3 x))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(declare-const c10 Int)
(declare-const c11 Int)
(assert (= z (+ (+ (- (+ (- (+ (* c11 c10) (- c9 (+ (- (+ (+ c8 c7) c6) c5) c4))) x) c3) c2) y) c1)))
(assert (= x (- (+ (* c11 c10) (- c9 (+ (- (+ (+ c8 c7) c6) c5) c4))) (- (+ (- (- z c1) y) c2) c3))))
(assert (= y (- (- z c1) (- (+ (- (+ (* c11 c10) (- c9 (+ (- (+ (+ c8 c7) c6) c5) c4))) x) c3) c2))))
#end

