; Generated with: https://github.com/nicdard/fusion-function-generator
; 60 functions (number of #begin ... #end blocks)
; 20 operators per function

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.indexof (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))))) (str.len c5) (str.len (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))) 0 (str.len x))))
(assert (= y (str.substr (str.substr (str.replace (str.replace (str.substr (str.substr (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.indexof (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))))) (str.len c5) (str.len (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))) x "") c4 "") (str.indexof (str.replace (str.replace (str.substr (str.substr (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.indexof (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))))) (str.len c5) (str.len (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))) x "") c4 "") (str.++ y (str.++ c2 c1)) (str.len c3)) (str.len (str.++ y (str.++ c2 c1)))) 0 (str.indexof (str.substr (str.replace (str.replace (str.substr (str.substr (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.indexof (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))))) (str.len c5) (str.len (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))) x "") c4 "") (str.indexof (str.replace (str.replace (str.substr (str.substr (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.indexof (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))))) c8 "") (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))))) (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1)))))))) (str.len c5) (str.len (str.++ x (str.++ c4 (str.++ c3 (str.++ y (str.++ c2 c1))))))) x "") c4 "") (str.++ y (str.++ c2 c1)) (str.len c3)) (str.len (str.++ y (str.++ c2 c1)))) (str.++ c2 c1) (str.len y)))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (+ (* c9 (+ c8 c7)) (+ c6 (* c5 (- c4 (+ (* (- (- x c3) y) c2) c1)))))))
(assert (= x (+ (+ (div (- (- c4 (div (- (- z (* c9 (+ c8 c7))) c6) c5)) c1) c2) y) c3)))
(assert (= y (- (- x c3) (div (- (- c4 (div (- (- z (* c9 (+ c8 c7))) c6) c5)) c1) c2))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (- (* (* (* (+ (+ x c9) c8) c7) c6) (* (+ (* c5 c4) (+ c3 c2)) c1)) y)))
(assert (= x (- (- (/ (/ (/ (+ z y) (* (+ (* c5 c4) (+ c3 c2)) c1)) c6) c7) c8) c9)))
(assert (= y (- (* (* (* (+ (+ x c9) c8) c7) c6) (* (+ (* c5 c4) (+ c3 c2)) c1)) z)))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ (str.++ c9 (str.++ c8 x)) (str.++ (str.++ c7 c6) (str.++ c5 (str.++ c4 (str.++ y (str.++ c3 (str.++ c2 c1)))))))))
(assert (= x (str.replace (str.substr (str.substr z 0 (str.len (str.++ c9 (str.++ c8 x)))) (str.len c9) (str.len (str.++ c8 x))) c8 "")))
(assert (= y (str.substr (str.substr (str.substr (str.replace (str.replace z (str.++ c9 (str.++ c8 x)) "") (str.++ c7 c6) "") (str.len c5) (str.len (str.++ c4 (str.++ y (str.++ c3 (str.++ c2 c1)))))) (str.indexof (str.substr (str.replace (str.replace z (str.++ c9 (str.++ c8 x)) "") (str.++ c7 c6) "") (str.len c5) (str.len (str.++ c4 (str.++ y (str.++ c3 (str.++ c2 c1)))))) (str.++ y (str.++ c3 (str.++ c2 c1))) (str.len c4)) (str.len (str.++ y (str.++ c3 (str.++ c2 c1))))) 0 (str.len y))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (+ (- (+ (+ (* (- c9 (+ (- (* (+ x y) c8) c7) c6)) c5) c4) c3) c2) c1)))
(assert (= x (- (div (+ (- (- c9 (div (- (- (+ (- z c1) c2) c3) c4) c5)) c6) c7) c8) y)))
(assert (= y (- (div (+ (- (- c9 (div (- (- (+ (- z c1) c2) c3) c4) c5)) c6) c7) c8) x)))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (not (xor (xor (xor (not (xor (not (not (xor c6 (xor (not x) c5)))) c4)) (xor y c3)) c2) c1))))
(assert (= x (not (xor c5 (xor c6 (not (not (xor c4 (not (xor (xor y c3) (xor c2 (xor c1 (not z)))))))))))))
(assert (= y (xor c3 (xor (not (xor (not (not (xor c6 (xor (not x) c5)))) c4)) (xor c2 (xor c1 (not z)))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (not (xor x (xor (not y) (xor c7 (xor (xor (xor c6 (not (xor c5 (xor c4 c3)))) c2) c1)))))))
(assert (= x (xor (xor (not y) (xor c7 (xor (xor (xor c6 (not (xor c5 (xor c4 c3)))) c2) c1))) (not z))))
(assert (= y (not (xor (xor c7 (xor (xor (xor c6 (not (xor c5 (xor c4 c3)))) c2) c1)) (xor x (not z))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(assert (= z (not (xor (xor (xor (not c4) (not (not x))) (xor (not c3) (not c2))) (not (not (xor c1 (not y))))))))
(assert (= x (not (not (xor (not c4) (xor (xor (not c3) (not c2)) (xor (not (not (xor c1 (not y)))) (not z))))))))
(assert (= y (not (xor c1 (not (not (xor (xor (xor (not c4) (not (not x))) (xor (not c3) (not c2))) (not z))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(assert (= z (not (not (xor (not (not c4)) (xor x (not (xor c3 (xor (not (not c2)) (not (xor c1 (not y))))))))))))
(assert (= x (xor (not (xor c3 (xor (not (not c2)) (not (xor c1 (not y)))))) (xor (not (not c4)) (not (not z))))))
(assert (= y (not (xor c1 (not (xor (not (not c2)) (xor c3 (not (xor x (xor (not (not c4)) (not (not z))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor c6 (not (not (xor c5 (not (xor c4 (not (xor c3 (xor c2 (not (xor (xor x y) c1)))))))))))))
(assert (= x (xor y (xor c1 (not (xor c2 (xor c3 (not (xor c4 (not (xor c5 (not (not (xor c6 z))))))))))))))
(assert (= y (xor x (xor c1 (not (xor c2 (xor c3 (not (xor c4 (not (xor c5 (not (not (xor c6 z))))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(assert (= z (not (xor x (not (not (not (not (xor c1 (not (not (not (not (not (not (not (not (not (not y)))))))))))))))))))
(assert (= x (xor (not (not (not (not (xor c1 (not (not (not (not (not (not (not (not (not (not y))))))))))))))) (not z))))
(assert (= y (not (not (not (not (not (not (not (not (not (not (xor c1 (not (not (not (not (xor x (not z)))))))))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor (not x) (xor (xor c6 c5) (not (xor c4 (not (not (xor (xor (xor y (not c3)) c2) c1)))))))))
(assert (= x (not (xor (xor (xor c6 c5) (not (xor c4 (not (not (xor (xor (xor y (not c3)) c2) c1)))))) z))))
(assert (= y (xor (not c3) (xor c2 (xor c1 (not (not (xor c4 (not (xor (xor c6 c5) (xor (not x) z)))))))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (* (+ c9 (+ c8 c7)) (- c6 (+ x (+ y (- (* c5 (+ c4 c3)) (+ c2 c1))))))))
(assert (= x (- (- c6 (/ z (+ c9 (+ c8 c7)))) (+ y (- (* c5 (+ c4 c3)) (+ c2 c1))))))
(assert (= y (- (- (- c6 (/ z (+ c9 (+ c8 c7)))) x) (- (* c5 (+ c4 c3)) (+ c2 c1)))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (not (not (xor (xor (not c5) (xor (xor x y) c4)) (not (xor c3 (xor c2 (not (not c1)))))))))))
(assert (= x (xor y (xor c4 (xor (not c5) (xor (not (xor c3 (xor c2 (not (not c1))))) (not (not (not z)))))))))
(assert (= y (xor x (xor c4 (xor (not c5) (xor (not (xor c3 (xor c2 (not (not c1))))) (not (not (not z)))))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (- x (* c9 (- (+ (* (* c8 (+ (* (+ (- c7 c6) y) c5) c4)) c3) c2) c1)))))
(assert (= x (+ z (* c9 (- (+ (* (* c8 (+ (* (+ (- c7 c6) y) c5) c4)) c3) c2) c1)))))
(assert (= y (- (/ (- (/ (/ (- (+ (/ (- x z) c9) c1) c2) c3) c8) c4) c5) (- c7 c6))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(assert (= z (not (not (not (xor c3 (not (not (xor (not c2) (not (not (xor (xor (not x) y) (not (not c1))))))))))))))
(assert (= x (not (xor y (xor (not (not c1)) (not (not (xor (not c2) (not (not (xor c3 (not (not (not z))))))))))))))
(assert (= y (xor (not x) (xor (not (not c1)) (not (not (xor (not c2) (not (not (xor c3 (not (not (not z)))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor (not (not (not (not (xor (not (xor c5 x)) (xor (xor c4 c3) c2)))))) (not (not (xor c1 y))))))
(assert (= x (xor c5 (not (xor (xor (xor c4 c3) c2) (not (not (not (not (xor (not (not (xor c1 y))) z))))))))))
(assert (= y (xor c1 (not (not (xor (not (not (not (not (xor (not (xor c5 x)) (xor (xor c4 c3) c2)))))) z))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))))
(assert (= x (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.indexof (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))) c5 "") 0 (str.len x))))
(assert (= y (str.replace (str.substr (str.substr (str.replace (str.replace (str.substr (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.indexof (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))) c5 "") x "") 0 (str.len (str.++ (str.++ (str.++ c4 c3) y) c2))) 0 (str.indexof (str.substr (str.replace (str.replace (str.substr (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.indexof (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ c8 (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))))) (str.len c8) (str.len (str.++ c7 (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))))) (str.len c7) (str.len (str.++ c6 (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1)))))) (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))) (str.len c6)) (str.len (str.++ c5 (str.++ x (str.++ (str.++ (str.++ (str.++ c4 c3) y) c2) c1))))) c5 "") x "") 0 (str.len (str.++ (str.++ (str.++ c4 c3) y) c2))) c2 (str.len (str.++ (str.++ c4 c3) y)))) (str.++ c4 c3) "")))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (xor (xor c5 (xor c4 x)) (not (xor (not c3) (not (xor (xor (not (not c2)) (not y)) c1))))))))
(assert (= x (xor c4 (xor c5 (xor (not (xor (not c3) (not (xor (xor (not (not c2)) (not y)) c1)))) (not z))))))
(assert (= y (not (xor (not (not c2)) (xor c1 (not (xor (not c3) (not (xor (xor c5 (xor c4 x)) (not z))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(assert (= z (not (not (not (not (not (not (xor (not (xor (not (not (not (not x)))) (not c1))) (not (not (not y))))))))))))
(assert (= x (not (not (not (not (xor (not c1) (not (xor (not (not (not y))) (not (not (not (not (not (not z)))))))))))))))
(assert (= y (not (not (not (xor (not (xor (not (not (not (not x)))) (not c1))) (not (not (not (not (not (not z))))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (xor (xor (xor (not c7) (not (xor x c6))) (xor y (xor (xor c5 c4) c3))) (not c2)) c1)))
(assert (= x (xor c6 (not (xor (not c7) (xor (xor y (xor (xor c5 c4) c3)) (xor (not c2) (xor c1 z))))))))
(assert (= y (xor (xor (xor c5 c4) c3) (xor (xor (not c7) (not (xor x c6))) (xor (not c2) (xor c1 z))))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (* x (* (- (+ (* (+ (- c9 (- (* c8 c7) c6)) (+ c5 c4)) c3) c2) y) c1))))
(assert (= x (/ z (* (- (+ (* (+ (- c9 (- (* c8 c7) c6)) (+ c5 c4)) c3) c2) y) c1))))
(assert (= y (- (+ (* (+ (- c9 (- (* c8 c7) c6)) (+ c5 c4)) c3) c2) (/ (/ z x) c1))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor x (xor c5 (xor (not (not c4)) (xor (not (not c3)) (not (not (not (xor (xor y c2) c1))))))))))
(assert (= x (xor (xor c5 (xor (not (not c4)) (xor (not (not c3)) (not (not (not (xor (xor y c2) c1))))))) z)))
(assert (= y (xor c2 (xor c1 (not (not (not (xor (not (not c3)) (xor (not (not c4)) (xor c5 (xor x z)))))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (* (- c9 (* (* (+ (+ (+ c8 (+ (- c7 (- c6 c5)) c4)) x) c3) y) c2)) c1)))
(assert (= x (- (- (div (div (- c9 (div z c1)) c2) y) c3) (+ c8 (+ (- c7 (- c6 c5)) c4)))))
(assert (= y (div (div (- c9 (div z c1)) c2) (+ (+ (+ c8 (+ (- c7 (- c6 c5)) c4)) x) c3))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ (str.++ x c7) (str.++ (str.++ c6 (str.++ c5 c4)) (str.++ c3 (str.++ (str.++ c2 y) c1))))))))
(assert (= x (str.substr (str.substr (str.replace (str.replace z c9 "") c8 "") 0 (str.indexof (str.replace (str.replace z c9 "") c8 "") (str.++ (str.++ c6 (str.++ c5 c4)) (str.++ c3 (str.++ (str.++ c2 y) c1))) (str.len (str.++ x c7)))) 0 (str.len x))))
(assert (= y (str.replace (str.substr (str.replace (str.replace (str.replace (str.replace (str.replace z c9 "") c8 "") (str.++ x c7) "") (str.++ c6 (str.++ c5 c4)) "") c3 "") 0 (str.indexof (str.replace (str.replace (str.replace (str.replace (str.replace z c9 "") c8 "") (str.++ x c7) "") (str.++ c6 (str.++ c5 c4)) "") c3 "") c1 (str.len (str.++ c2 y)))) c2 "")))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (* c9 (* (+ (* (* (+ x c8) c7) c6) (* y (* c5 c4))) (* (+ c3 c2) c1)))))
(assert (= x (- (/ (/ (- (/ (/ z c9) (* (+ c3 c2) c1)) (* y (* c5 c4))) c6) c7) c8)))
(assert (= y (/ (- (/ (/ z c9) (* (+ c3 c2) c1)) (* (* (+ x c8) c7) c6)) (* c5 c4))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (+ (+ c9 (- (- x c8) (* (- (* (* c7 c6) (* (* c5 c4) c3)) y) c2))) c1)))
(assert (= x (+ (+ (- (- z c1) c9) (* (- (* (* c7 c6) (* (* c5 c4) c3)) y) c2)) c8)))
(assert (= y (- (* (* c7 c6) (* (* c5 c4) c3)) (div (- (- x c8) (- (- z c1) c9)) c2))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor (not (xor (xor (not c5) x) c4)) (xor c3 (not (xor (not (not y)) (not (not (xor c2 c1)))))))))
(assert (= x (xor (not c5) (xor c4 (not (xor (xor c3 (not (xor (not (not y)) (not (not (xor c2 c1)))))) z))))))
(assert (= y (not (not (xor (not (not (xor c2 c1))) (not (xor c3 (xor (not (xor (xor (not c5) x) c4)) z))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (not (xor (not (not x)) (xor c5 (xor (xor (not y) (xor (not (not c4)) (xor c3 c2))) c1)))))))
(assert (= x (not (not (xor (xor c5 (xor (xor (not y) (xor (not (not c4)) (xor c3 c2))) c1)) (not (not z)))))))
(assert (= y (not (xor (xor (not (not c4)) (xor c3 c2)) (xor c1 (xor c5 (xor (not (not x)) (not (not z)))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor (not c5) (xor c4 (xor c3 (not (not (xor (not x) (not (xor (xor c2 c1) (not (not y))))))))))))
(assert (= x (not (xor (not (xor (xor c2 c1) (not (not y)))) (not (not (xor c3 (xor c4 (xor (not c5) z)))))))))
(assert (= y (not (not (xor (xor c2 c1) (not (xor (not x) (not (not (xor c3 (xor c4 (xor (not c5) z))))))))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))))
(assert (= x (str.substr (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") 0 (str.indexof (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))) (str.len (str.++ (str.++ (str.++ c7 c6) x) c5)))) 0 (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") 0 (str.indexof (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))) (str.len (str.++ (str.++ (str.++ c7 c6) x) c5)))) c5 (str.len (str.++ (str.++ c7 c6) x)))) (str.len (str.++ c7 c6)) (str.len x))))
(assert (= y (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") (str.len (str.++ (str.++ (str.++ c7 c6) x) c5)) (str.len (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) 0 (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ (str.++ (str.++ c7 c6) x) c5) (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))))) c8 "") (str.len (str.++ (str.++ (str.++ c7 c6) x) c5)) (str.len (str.++ y (str.++ c4 (str.++ (str.++ c3 c2) c1))))) (str.++ c4 (str.++ (str.++ c3 c2) c1)) (str.len y)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (- (* (+ c9 (- x (+ (+ c8 c7) c6))) c5) (* y (* (* c4 (* c3 c2)) c1)))))
(assert (= x (+ (- (/ (+ z (* y (* (* c4 (* c3 c2)) c1))) c5) c9) (+ (+ c8 c7) c6))))
(assert (= y (/ (- (* (+ c9 (- x (+ (+ c8 c7) c6))) c5) z) (* (* c4 (* c3 c2)) c1))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor (not c7) (xor (xor (xor c6 (xor c5 (xor c4 (not x)))) (xor c3 y)) (xor (not c2) c1)))))
(assert (= x (not (xor c4 (xor c5 (xor c6 (xor (xor c3 y) (xor (xor (not c2) c1) (xor (not c7) z)))))))))
(assert (= y (xor c3 (xor (xor c6 (xor c5 (xor c4 (not x)))) (xor (xor (not c2) c1) (xor (not c7) z))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(declare-const c7 Bool)
(assert (= z (xor x (xor (xor c7 (xor (not (xor c6 c5)) c4)) (xor (not (xor (not y) (xor c3 c2))) c1)))))
(assert (= x (xor (xor (xor c7 (xor (not (xor c6 c5)) c4)) (xor (not (xor (not y) (xor c3 c2))) c1)) z)))
(assert (= y (not (xor (xor c3 c2) (not (xor c1 (xor (xor c7 (xor (not (xor c6 c5)) c4)) (xor x z))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (- (+ c9 c8) (+ c7 (- (* (* (+ c6 (* c5 (- (- x c4) c3))) y) c2) c1)))))
(assert (= x (+ (+ (div (- (div (div (+ (- (- (+ c9 c8) z) c7) c1) c2) y) c6) c5) c3) c4)))
(assert (= y (div (div (+ (- (- (+ c9 c8) z) c7) c1) c2) (+ c6 (* c5 (- (- x c4) c3))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (* (* c9 (- x (* (- c8 (- c7 (- c6 (+ (+ (+ y c5) c4) c3)))) c2))) c1)))
(assert (= x (+ (div (div z c1) c9) (* (- c8 (- c7 (- c6 (+ (+ (+ y c5) c4) c3)))) c2))))
(assert (= y (- (- (- (- c6 (- c7 (- c8 (div (- x (div (div z c1) c9)) c2)))) c3) c4) c5)))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (* c9 (* (* (- (+ (- c8 (- x (+ c7 (+ (+ c6 c5) c4)))) c3) c2) y) c1))))
(assert (= x (+ (- c8 (- (+ (/ (/ (/ z c9) c1) y) c2) c3)) (+ c7 (+ (+ c6 c5) c4)))))
(assert (= y (/ (/ (/ z c9) c1) (- (+ (- c8 (- x (+ c7 (+ (+ c6 c5) c4)))) c3) c2))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (* x (+ y (- c9 (- (* (* c8 (* (* c7 c6) (* (* c5 c4) c3))) c2) c1))))))
(assert (= x (/ z (+ y (- c9 (- (* (* c8 (* (* c7 c6) (* (* c5 c4) c3))) c2) c1))))))
(assert (= y (- (/ z x) (- c9 (- (* (* c8 (* (* c7 c6) (* (* c5 c4) c3))) c2) c1)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (+ (+ (- x (- c9 (- c8 c7))) (- (- (* c6 (- (- c5 c4) y)) c3) c2)) c1)))
(assert (= x (+ (- (- z c1) (- (- (* c6 (- (- c5 c4) y)) c3) c2)) (- c9 (- c8 c7)))))
(assert (= y (- (- c5 c4) (/ (+ (+ (- (- z c1) (- x (- c9 (- c8 c7)))) c2) c3) c6))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ (str.++ (str.++ x c8) c7) (str.++ y (str.++ c6 (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 c1)))))))))
(assert (= x (str.substr (str.substr (str.substr (str.replace z c9 "") 0 (str.len (str.++ (str.++ x c8) c7))) 0 (str.indexof (str.substr (str.replace z c9 "") 0 (str.len (str.++ (str.++ x c8) c7))) c7 (str.len (str.++ x c8)))) 0 (str.indexof (str.substr (str.substr (str.replace z c9 "") 0 (str.len (str.++ (str.++ x c8) c7))) 0 (str.indexof (str.substr (str.replace z c9 "") 0 (str.len (str.++ (str.++ x c8) c7))) c7 (str.len (str.++ x c8)))) c8 (str.len x)))))
(assert (= y (str.substr (str.substr (str.replace z c9 "") (str.len (str.++ (str.++ x c8) c7)) (str.len (str.++ y (str.++ c6 (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 c1))))))) 0 (str.len y))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) (str.++ y (str.++ c4 (str.++ c3 (str.++ c2 c1))))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr (str.substr (str.substr z (str.len c9) (str.len (str.++ (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) (str.++ y (str.++ c4 (str.++ c3 (str.++ c2 c1))))))) 0 (str.len (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5))) 0 (str.len (str.++ (str.++ c8 (str.++ c7 x)) c6))) 0 (str.len (str.++ c8 (str.++ c7 x)))) (str.len c8) (str.len (str.++ c7 x))) (str.len c7) (str.len x))))
(assert (= y (str.substr (str.replace (str.substr z (str.len c9) (str.len (str.++ (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) (str.++ y (str.++ c4 (str.++ c3 (str.++ c2 c1))))))) (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) "") 0 (str.indexof (str.replace (str.substr z (str.len c9) (str.len (str.++ (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) (str.++ y (str.++ c4 (str.++ c3 (str.++ c2 c1))))))) (str.++ (str.++ (str.++ c8 (str.++ c7 x)) c6) c5) "") (str.++ c4 (str.++ c3 (str.++ c2 c1))) (str.len y)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (- (- c9 (- x (+ (- (* (+ (* c8 c7) c6) (- c5 (* c4 y))) c3) c2))) c1)))
(assert (= x (+ (- c9 (+ z c1)) (+ (- (* (+ (* c8 c7) c6) (- c5 (* c4 y))) c3) c2))))
(assert (= y (/ (- c5 (/ (+ (- (- x (- c9 (+ z c1))) c2) c3) (+ (* c8 c7) c6))) c4)))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (- (+ c9 c8) (- (+ (* (- x (* c7 (* (- (+ c6 y) c5) c4))) c3) c2) c1))))
(assert (= x (+ (div (- (+ (- (+ c9 c8) z) c1) c2) c3) (* c7 (* (- (+ c6 y) c5) c4)))))
(assert (= y (- (+ (div (div (- x (div (- (+ (- (+ c9 c8) z) c1) c2) c3)) c7) c4) c5) c6)))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor (not (not (not (xor x y)))) (not (not (xor c5 (xor (xor c4 (not c3)) (xor (not c2) c1))))))))
(assert (= x (xor y (not (not (not (xor (not (not (xor c5 (xor (xor c4 (not c3)) (xor (not c2) c1))))) z)))))))
(assert (= y (xor x (not (not (not (xor (not (not (xor c5 (xor (xor c4 (not c3)) (xor (not c2) c1))))) z)))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ (str.++ c9 c8) (str.++ x (str.++ (str.++ (str.++ c7 (str.++ (str.++ c6 (str.++ (str.++ c5 c4) c3)) c2)) c1) y)))))
(assert (= x (str.substr (str.replace z (str.++ c9 c8) "") 0 (str.len x))))
(assert (= y (str.replace (str.substr (str.replace z (str.++ c9 c8) "") (str.len x) (str.len (str.++ (str.++ (str.++ c7 (str.++ (str.++ c6 (str.++ (str.++ c5 c4) c3)) c2)) c1) y))) (str.++ (str.++ c7 (str.++ (str.++ c6 (str.++ (str.++ c5 c4) c3)) c2)) c1) "")))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))))
(assert (= x (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") 0 (str.len (str.++ x (str.++ c7 c6)))) 0 (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") 0 (str.len (str.++ x (str.++ c7 c6)))) (str.++ c7 c6) (str.len x)))))
(assert (= y (str.substr (str.substr (str.replace (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))) (str.len c5)) (str.len (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))))) (str.++ c4 c3) "") (str.indexof (str.replace (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))) (str.len c5)) (str.len (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))))) (str.++ c4 c3) "") (str.++ c1 y) (str.len c2)) (str.len (str.++ c1 y))) (str.indexof (str.substr (str.replace (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))) (str.len c5)) (str.len (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))))) (str.++ c4 c3) "") (str.indexof (str.replace (str.substr (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.indexof (str.substr (str.replace (str.substr z (str.indexof z (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.len c9)) (str.len (str.++ c8 (str.++ (str.++ x (str.++ c7 c6)) (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))))) c8 "") (str.len (str.++ x (str.++ c7 c6))) (str.len (str.++ c5 (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y)))))) (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))) (str.len c5)) (str.len (str.++ (str.++ c4 c3) (str.++ c2 (str.++ c1 y))))) (str.++ c4 c3) "") (str.++ c1 y) (str.len c2)) (str.len (str.++ c1 y))) y (str.len c1)) (str.len y))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (* c9 (- (+ (+ (+ x (- c8 (+ (- (+ (* c7 c6) c5) c4) c3))) c2) y) c1))))
(assert (= x (- (- (- (+ (div z c9) c1) y) c2) (- c8 (+ (- (+ (* c7 c6) c5) c4) c3)))))
(assert (= y (- (+ (div z c9) c1) (+ (+ x (- c8 (+ (- (+ (* c7 c6) c5) c4) c3))) c2))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(assert (= z (xor c4 (not (not (xor (not (not c3)) (not (xor x (xor c2 (not (xor y (not (not (not c1))))))))))))))
(assert (= x (xor (xor c2 (not (xor y (not (not (not c1)))))) (not (xor (not (not c3)) (not (not (xor c4 z))))))))
(assert (= y (xor (not (not (not c1))) (not (xor c2 (xor x (not (xor (not (not c3)) (not (not (xor c4 z)))))))))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))))))
(assert (= x (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) 0 (str.indexof (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)) (str.len x)))))
(assert (= y (str.substr (str.substr (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1) (str.len c7)) (str.len (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))) 0 (str.len (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)))) (str.++ c6 c5) "") 0 (str.len (str.++ (str.++ y c4) c3))) 0 (str.indexof (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1) (str.len c7)) (str.len (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))) 0 (str.len (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)))) (str.++ c6 c5) "") 0 (str.len (str.++ (str.++ y c4) c3))) c3 (str.len (str.++ y c4)))) 0 (str.indexof (str.substr (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1) (str.len c7)) (str.len (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))) 0 (str.len (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)))) (str.++ c6 c5) "") 0 (str.len (str.++ (str.++ y c4) c3))) 0 (str.indexof (str.substr (str.replace (str.substr (str.substr (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.len c8) (str.len (str.++ x (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))))) (str.len x) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1)))) (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1) (str.len c7)) (str.len (str.++ (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)) c1))) 0 (str.len (str.++ (str.++ c6 c5) (str.++ (str.++ (str.++ y c4) c3) c2)))) (str.++ c6 c5) "") 0 (str.len (str.++ (str.++ y c4) c3))) c3 (str.len (str.++ y c4)))) c4 (str.len y)))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ (str.++ (str.++ c8 x) c7) (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1))))))))
(assert (= x (str.substr (str.substr (str.substr (str.replace z c9 "") 0 (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7)))) 0 (str.len (str.++ c8 x))) (str.indexof (str.substr (str.substr (str.replace z c9 "") 0 (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7)))) 0 (str.len (str.++ c8 x))) x (str.len c8)) (str.len x))))
(assert (= y (str.substr (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace z c9 "") (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7))) (str.len (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))))) (str.len c6) (str.len (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1))))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7))) (str.len (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))))) (str.len c6) (str.len (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1))))) (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)) (str.len c5)) (str.len (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.indexof (str.substr (str.substr (str.substr (str.replace z c9 "") (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7))) (str.len (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))))) (str.len c6) (str.len (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1))))) (str.indexof (str.substr (str.substr (str.replace z c9 "") (str.indexof (str.replace z c9 "") (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.len (str.++ (str.++ c8 x) c7))) (str.len (str.++ c6 (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))))) (str.len c6) (str.len (str.++ c5 (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1))))) (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)) (str.len c5)) (str.len (str.++ c4 (str.++ (str.++ y (str.++ c3 c2)) c1)))) (str.++ (str.++ y (str.++ c3 c2)) c1) (str.len c4)) (str.len (str.++ (str.++ y (str.++ c3 c2)) c1))) 0 (str.len (str.++ y (str.++ c3 c2)))) 0 (str.len y))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(declare-const c6 Bool)
(assert (= z (xor c6 (xor (not c5) (not (xor c4 (not (xor (xor (not c3) x) (xor (not (xor c2 c1)) y)))))))))
(assert (= x (xor (not c3) (xor (xor (not (xor c2 c1)) y) (not (xor c4 (not (xor (not c5) (xor c6 z)))))))))
(assert (= y (xor (not (xor c2 c1)) (xor (xor (not c3) x) (not (xor c4 (not (xor (not c5) (xor c6 z)))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (+ c9 (* (* (- c8 (- (+ (* c7 c6) c5) x)) (- (- (+ c4 c3) c2) c1)) y))))
(assert (= x (- (+ (* c7 c6) c5) (- c8 (div (div (- z c9) y) (- (- (+ c4 c3) c2) c1))))))
(assert (= y (div (- z c9) (* (- c8 (- (+ (* c7 c6) c5) x)) (- (- (+ c4 c3) c2) c1)))))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ x (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1))))))))
(assert (= x (str.substr (str.replace z c9 "") 0 (str.indexof (str.replace z c9 "") (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1)))) (str.len x)))))
(assert (= y (str.substr (str.substr (str.replace (str.substr (str.substr (str.replace (str.substr (str.substr (str.replace z c9 "") (str.len x) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1)))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1))))) c7 "") 0 (str.indexof (str.replace (str.substr (str.substr (str.replace z c9 "") (str.len x) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1)))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1))))) c7 "") (str.++ c2 c1) (str.len (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3)))) 0 (str.len (str.++ c6 (str.++ (str.++ y c5) c4)))) c6 "") 0 (str.len (str.++ y c5))) 0 (str.indexof (str.substr (str.replace (str.substr (str.substr (str.replace (str.substr (str.substr (str.replace z c9 "") (str.len x) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1)))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1))))) c7 "") 0 (str.indexof (str.replace (str.substr (str.substr (str.replace z c9 "") (str.len x) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1)))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3) (str.++ c2 c1))))) c7 "") (str.++ c2 c1) (str.len (str.++ (str.++ c6 (str.++ (str.++ y c5) c4)) c3)))) 0 (str.len (str.++ c6 (str.++ (str.++ y c5) c4)))) c6 "") 0 (str.len (str.++ y c5))) c5 (str.len y)))))
#end

#begin
(declare-const x Real)
(declare-const y Real)
(declare-const z Real)
(declare-const c1 Real)
(declare-const c2 Real)
(declare-const c3 Real)
(declare-const c4 Real)
(declare-const c5 Real)
(declare-const c6 Real)
(declare-const c7 Real)
(declare-const c8 Real)
(declare-const c9 Real)
(assert (= z (+ c9 (* c8 (- c7 (+ (- c6 x) (- c5 (+ (* c4 (+ c3 (* y c2))) c1))))))))
(assert (= x (- c6 (- (- c7 (/ (- z c9) c8)) (- c5 (+ (* c4 (+ c3 (* y c2))) c1))))))
(assert (= y (/ (- (/ (- (- c5 (- (- c7 (/ (- z c9) c8)) (- c6 x))) c1) c4) c3) c2)))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (not (xor (not (xor (not (xor (xor c5 (xor (not (not c4)) x)) c3)) (xor c2 y))) (not c1))))))
(assert (= x (xor (not (not c4)) (xor c5 (xor c3 (not (xor (xor c2 y) (not (xor (not c1) (not (not z)))))))))))
(assert (= y (xor c2 (xor (not (xor (xor c5 (xor (not (not c4)) x)) c3)) (not (xor (not c1) (not (not z))))))))
#end

#begin
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const c4 Int)
(declare-const c5 Int)
(declare-const c6 Int)
(declare-const c7 Int)
(declare-const c8 Int)
(declare-const c9 Int)
(assert (= z (- (- c9 (+ c8 c7)) (+ c6 (- (- c5 c4) (- (+ c3 c2) (+ x (* y c1))))))))
(assert (= x (- (- (+ c3 c2) (- (- c5 c4) (- (- (- c9 (+ c8 c7)) z) c6))) (* y c1))))
(assert (= y (div (- (- (+ c3 c2) (- (- c5 c4) (- (- (- c9 (+ c8 c7)) z) c6))) x) c1)))
#end

#begin
(declare-const x String)
(declare-const y String)
(declare-const z String)
(declare-const c1 String)
(declare-const c2 String)
(declare-const c3 String)
(declare-const c4 String)
(declare-const c5 String)
(declare-const c6 String)
(declare-const c7 String)
(declare-const c8 String)
(declare-const c9 String)
(assert (= z (str.++ c9 (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))))))
(assert (= x (str.substr (str.substr (str.substr (str.substr (str.replace (str.substr (str.substr z (str.indexof z (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))) (str.len c9)) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1)))) c7 "") 0 (str.len (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2))) 0 (str.len (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3))) 0 (str.len (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)))) 0 (str.indexof (str.substr (str.substr (str.substr (str.replace (str.substr (str.substr z (str.indexof z (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))) (str.len c9)) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1)))) c7 "") 0 (str.len (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2))) 0 (str.len (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3))) 0 (str.len (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)))) (str.++ (str.++ y (str.++ c6 c5)) c4) (str.len x)))))
(assert (= y (str.substr (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace (str.substr (str.substr z (str.indexof z (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))) (str.len c9)) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1)))) c7 "") 0 (str.len (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2))) 0 (str.len (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3))) 0 (str.len (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)))) (str.len x) (str.len (str.++ (str.++ y (str.++ c6 c5)) c4))) 0 (str.len (str.++ y (str.++ c6 c5)))) 0 (str.indexof (str.substr (str.substr (str.substr (str.substr (str.substr (str.replace (str.substr (str.substr z (str.indexof z (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))) (str.len c9)) (str.len (str.++ c8 (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1))))) (str.len c8) (str.len (str.++ c7 (str.++ (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2) c1)))) c7 "") 0 (str.len (str.++ (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3) c2))) 0 (str.len (str.++ (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)) c3))) 0 (str.len (str.++ x (str.++ (str.++ y (str.++ c6 c5)) c4)))) (str.len x) (str.len (str.++ (str.++ y (str.++ c6 c5)) c4))) 0 (str.len (str.++ y (str.++ c6 c5)))) (str.++ c6 c5) (str.len y)))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (not (not (not (not (xor x (xor (xor c5 (xor (xor (not (not c4)) (xor c3 c2)) y)) c1)))))))))
(assert (= x (xor (xor (xor c5 (xor (xor (not (not c4)) (xor c3 c2)) y)) c1) (not (not (not (not (not z))))))))
(assert (= y (xor (xor (not (not c4)) (xor c3 c2)) (xor c5 (xor c1 (xor x (not (not (not (not (not z)))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (not (not (not (not (xor (xor (xor (not c5) (xor (not (xor c4 (xor x c3))) (not y))) c2) c1)))))))
(assert (= x (xor c3 (xor c4 (not (xor (not y) (xor (not c5) (xor c2 (xor c1 (not (not (not (not z)))))))))))))
(assert (= y (not (xor (not (xor c4 (xor x c3))) (xor (not c5) (xor c2 (xor c1 (not (not (not (not z)))))))))))
#end

#begin
(declare-const x Bool)
(declare-const y Bool)
(declare-const z Bool)
(declare-const c1 Bool)
(declare-const c2 Bool)
(declare-const c3 Bool)
(declare-const c4 Bool)
(declare-const c5 Bool)
(assert (= z (xor c5 (not (xor c4 (xor (xor (xor x (not c3)) (not c2)) (not (not (xor c1 (not (not y)))))))))))
(assert (= x (xor (not c3) (xor (not c2) (xor (not (not (xor c1 (not (not y))))) (xor c4 (not (xor c5 z))))))))
(assert (= y (not (not (xor c1 (not (not (xor (xor (xor x (not c3)) (not c2)) (xor c4 (not (xor c5 z)))))))))))
#end

