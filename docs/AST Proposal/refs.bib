@article{TAOM,
author = {Winterer, Dominik and Zhang, Chengyu and Su, Zhendong},
title = {On the Unusual Effectiveness of Type-Aware Operator Mutations for Testing SMT Solvers},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {OOPSLA},
url = {https://doi.org/10.1145/3428261},
doi = {10.1145/3428261},
abstract = {We propose type-aware operator mutation, a simple, but unusually effective approach for testing SMT solvers. The key idea is to mutate operators of conforming types within the seed formulas to generate well-typed mutant formulas. These mutant formulas are then used as the test cases for SMT solvers. We realized type-aware operator mutation within the OpFuzz tool and used it to stress-test Z3 and CVC4, two state-of-the-art SMT solvers. Type-aware operator mutations are unusually effective: During one year of extensive testing with OpFuzz, we reported 1092 bugs on Z3’s and CVC4’s respective GitHub issue trackers, out of which 819 unique bugs were confirmed and 685 of the confirmed bugs were fixed by the developers. The detected bugs are highly diverse — we found bugs of many different types (soundness bugs, invalid model bugs, crashes, etc.), logics and solver configurations. We have further conducted an in-depth study of the bugs found by OpFuzz. The study results show that the bugs found by OpFuzz are of high quality. Many of them affect core components of the SMT solvers’ codebases, and some required major changes for the developers to fix. Among the 819 confirmed bugs found by OpFuzz,184 were soundness bugs, the most critical bugs in SMT solvers,and 489 were in the default modes of the solvers. Notably, OpFuzz found 27 critical soundness bugs in CVC4, which has proved to be a very stable SMT solver.},
journal = {Proc. ACM Program. Lang.},
month = {nov},
articleno = {193},
numpages = {25},
keywords = {Fuzz testing, SMT solvers, Type-aware operator mutation}
}

@article{GTAM,
author = {Park, Jiwon and Winterer, Dominik and Zhang, Chengyu and Su, Zhendong},
title = {Generative Type-Aware Mutation for Testing SMT Solvers},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485529},
doi = {10.1145/3485529},
abstract = {We propose Generative Type-Aware Mutation, an effective approach for testing SMT solvers. The key idea is to realize generation through the mutation of expressions rooted with parametric operators from the SMT-LIB specification. Generative Type-Aware Mutation is a hybrid of mutation-based and grammar-based fuzzing and features an infinite mutation space—overcoming a major limitation of OpFuzz, the state-of-the-art fuzzer for SMT solvers. We have realized Generative Type-Aware Mutation in a practical SMT solver bug hunting tool, TypeFuzz. During our testing period with TypeFuzz, we reported over 237 bugs in the state-of-the-art SMT solvers Z3 and CVC4. Among these, 189 bugs were confirmed and 176 bugs were fixed. Most notably, we found 18 soundness bugs in CVC4’s default mode alone. Several of them were two years latent (7/18). CVC4 has been proved to be a very stable SMT solver and has resisted several fuzzing campaigns.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {152},
numpages = {19},
keywords = {Generative type-aware mutation, Fuzz testing, SMT solvers}
}

@inproceedings{SemFusion,
      title = {Validating SMT Solvers via Semantic Fusion},
      author = {Winterer, Dominik and Zhang, Chengyu and Su, Zhendong},
      year = {2020},
      booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming
                   Language Design and Implementation},
      pages = {718–730}
}

@article{STORM,
  author    = {Muhammad Numair Mansur and
               Maria Christakis and
               Valentin W{\"{u}}stholz and
               Fuyuan Zhang},
  title     = {Detecting Critical Bugs in {SMT} Solvers Using Blackbox Mutational
               Fuzzing},
  journal   = {CoRR},
  volume    = {abs/2004.05934},
  year      = {2020},
  url       = {https://arxiv.org/abs/2004.05934},
  eprinttype = {arXiv},
  eprint    = {2004.05934},
  timestamp = {Tue, 14 Apr 2020 16:40:34 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2004-05934.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}